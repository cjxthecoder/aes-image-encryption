package mlbb_Images;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.metadata.IIOMetadataNode;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.ImageOutputStream;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.*;
import org.w3c.dom.Node;

public final class MetaWriter {
	// Generated by ChatGPT-5
    private static final String FORMAT = "javax_imageio_png_1.0";

    public static void writeWithText(BufferedImage img, File out, Map<String,String> kv, String formatName) throws Exception {
        ImageWriter writer = ImageIO.getImageWritersByFormatName(formatName).next();
        ImageWriteParam param = writer.getDefaultWriteParam();
        ImageTypeSpecifier type = ImageTypeSpecifier.createFromRenderedImage(img);
        IIOMetadata meta = writer.getDefaultImageMetadata(type, param);

        IIOMetadataNode root = (IIOMetadataNode) meta.getAsTree(FORMAT);
        IIOMetadataNode text = getOrCreateChild(root, "tEXt");
        for (var e : kv.entrySet()) {
            IIOMetadataNode entry = new IIOMetadataNode("tEXtEntry");
            entry.setAttribute("keyword", e.getKey());
            entry.setAttribute("value", e.getValue());
            text.appendChild(entry);
        }
        meta.mergeTree(FORMAT, root);

        try (ImageOutputStream ios = ImageIO.createImageOutputStream(out)) {
            writer.setOutput(ios);
            writer.write(new IIOImage(img, null, meta));
        } finally {
            writer.dispose();
        }
    }

    public static Map<String,String> readText(File in, String formatName) throws Exception {
        ImageReader reader = ImageIO.getImageReadersByFormatName(formatName).next();
        try (ImageInputStream iis = ImageIO.createImageInputStream(in)) {
            reader.setInput(iis, true, true);
            IIOMetadata meta = reader.getImageMetadata(0);
            Node root = meta.getAsTree(FORMAT);
            Map<String,String> map = new HashMap<>();
            Node text = child(root, "tEXt");
            if (text != null) {
                for (Node n = text.getFirstChild(); n != null; n = n.getNextSibling()) {
                    if ("tEXtEntry".equals(n.getNodeName())) {
                        var el = (IIOMetadataNode) n;
                        map.put(el.getAttribute("keyword"), el.getAttribute("value"));
                    }
                }
            }
            return map;
        } finally {
            reader.dispose();
        }
    }

    private static IIOMetadataNode getOrCreateChild(IIOMetadataNode root, String name) {
        Node n = child(root, name);
        if (n != null) return (IIOMetadataNode) n;
        IIOMetadataNode c = new IIOMetadataNode(name);
        root.appendChild(c);
        return c;
    }
    
    private static Node child(Node root, String name) {
        for (Node n = root.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (name.equals(n.getNodeName())) return n;
        }
        return null;
    }
}
